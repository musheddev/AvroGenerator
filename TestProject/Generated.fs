//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace rec Generated

module Benzinga =
    type Benzinga =
        { event: string
          id: int
          content_id: int
          version_id: int
          ``type``: string
          created_at: string
          updated_at: string
          title: string
          body: string
          author: string
          teaser_text: string
          canonical_path: string
          tags: string
          tickers: string
          channels: string
          timestamp: string }

module ControlMessageSchema =
    type Heartbeat = { timestamp: int64 }
    type StreamInitiated =
        { name: string
          uuid: string
          referenceDate: string
          soupPartition: int
          timestamp: int64
          schema: string }

    type StreamCompleted =
        { uuid: string
          timestamp: int64
          finalSequenceNumber: int64 }

    type StreamResumed =
        { uuid: string
          timestamp: int64
          resumeSequenceNumber: int64 }

    type StreamDeleted = { uuid: string }

module ``CTA-A-UF30`` =
    type SeqAdminText =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          text: string }

    type SeqAlternateSymbol =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          sLocate: int
          symbolType: string
          symbol: string }

    type SeqAsOfTrade =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          price: int64
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          month: string
          day: string
          year: int
          reportNanos: int64
          appendages: byte [] }

    type SeqAsOfTradeCancel =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          price: int64
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          month: string
          day: string
          year: int
          reportNanos: int64
          cancelFlags: string
          appendages: byte [] }

    type SeqAsOfTradeCorrection =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          oldTradeId: int
          oldDenom: string
          oldPrice: int64
          oldVolume: int64
          oldPriceFlags: string
          oldEligFlags: string
          oldReportFlags: int
          oldMonth: string
          oldDay: string
          oldYear: int
          oldReportNanos: int64
          newTradeId: int
          newDenom: string
          newPrice: int64
          newVolume: int64
          newPriceFlags: string
          newEligFlags: string
          newReportFlags: int
          newMonth: string
          newDay: string
          newYear: int
          newReportNanos: int64
          correctionFlags: string
          appendages: byte [] }

    type SeqAsOfTradeFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          priceDecimal: int64
          priceFractional: int
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          month: string
          day: string
          year: int
          reportNanos: int64
          appendages: byte [] }

    type SeqAsOfValueUpdate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          flags: int
          month: string
          day: string
          year: int
          valueNanos: int64
          appendages: byte [] }

    type SeqCapitalDistributions =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          reportType: string
          paymentMonth: string
          paymentDay: string
          paymentYear: int
          recordMonth: string
          recordDay: string
          recordYear: int
          exMonth: string
          exDay: string
          exYear: int
          denom: string
          amount: int64
          flags: int
          appendages: byte [] }

    type SeqChannelDay =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          dayOfMonth: string }

    type SeqChannelEvent =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          event: string
          mcLocate: int
          appendages: byte [] }

    type SeqChannelSeconds =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          seconds: int }

    type SeqCombinationLeg =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          sLocate: int
          legLocate: int
          side: string
          ratioDenom: string
          ratio: int64
          appendages: byte [] }

    type SeqDividend =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          reportType: string
          paymentMonth: string
          paymentDay: string
          paymentYear: int
          recordMonth: string
          recordDay: string
          recordYear: int
          exMonth: string
          exDay: string
          exYear: int
          dividendType: string
          totalCashDenom: string
          totalCash: int64
          flags: int
          appendages: byte [] }

    type SeqEndOfSnapshot =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          nextSequence: int64 }

    type SeqExchangeIdLocate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          mcLocate: int
          exchangeId: string }

    type SeqIndexSymbolParticipation =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          sLocate: int
          cLocate: int
          appendages: byte [] }

    type SeqInstrumentImbalance =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          imbalanceType: string
          side: string
          volume: int64
          appendages: byte [] }

    type SeqInstrumentLocate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          locate: int
          country: string
          currency: string
          mic: string
          productType: string
          symbol: string
          appendages: byte [] }

    type SeqInstrumentMetaData =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          sLocate: int
          appendages: byte [] }

    type SeqInstrumentStatus =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          statusType: string
          statusCode: string
          reason: string
          statusFlags: string
          detail: string
          appendages: byte [] }

    type SeqMarketCenterLocate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          locate: int
          mic: string }

    type SeqMarketMakerLocate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          locate: int
          mmid: string }

    type SeqMarketMakerStatus =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          appendages: byte [] }

    type SeqNewsUpdate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          newsTime: int
          month: string
          day: string
          year: int
          headline: string
          news: string }

    type SeqOneSidedNBBOExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          denom: string
          price: int64
          size: int
          side: string
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqOneSidedNBBOLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          price: int
          size: int
          side: string
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqOneSidedNBBOShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          price: int
          size: int
          side: string
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqOneSidedQuoteExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          denom: string
          price: int64
          size: int
          side: string
          condition: string
          quoteFlags: string
          priceFlags: string
          appendages: byte [] }

    type SeqOneSidedQuoteFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          denom: string
          priceDecimal: int64
          priceFractional: int
          size: int
          side: string
          condition: string
          quoteFlags: string
          priceFlags: string
          appendages: byte [] }

    type SeqOneSidedQuoteLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          price: int
          size: int
          side: string
          condition: string
          quoteFlags: string
          priceFlags: string
          appendages: byte [] }

    type SeqOneSidedQuoteShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          price: int
          size: int
          side: string
          condition: string
          quoteFlags: string
          priceFlags: string
          appendages: byte [] }

    type SeqOptionDeliveryComponent =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          rLocate: int
          index: int
          total: int
          deliverableUnits: int
          settlementMethod: string
          fixedAmtDenom: string
          fixedAmt: int64
          currency: string
          strikePct: int
          cLocate: int }

    type SeqOrderAddedExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          side: string
          denom: string
          price: int64
          quantity: int
          mmLocate: int
          flags: string
          appendages: byte [] }

    type SeqOrderAddedLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          side: string
          price: int
          quantity: int
          mmLocate: int
          flags: string
          appendages: byte [] }

    type SeqOrderAddedShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          side: string
          price: int
          quantity: int
          mmLocate: int
          flags: string
          appendages: byte [] }

    type SeqOrderBookClear =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          appendages: byte [] }

    type SeqOrderCanceled =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          quantity: int
          appendages: byte [] }

    type SeqOrderDeleted =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          appendages: byte [] }

    type SeqOrderExecuted =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          tradeId: int
          quantity: int
          flags: string
          appendages: byte [] }

    type SeqOrderExecutedAtPrice =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          tradeId: int
          quantity: int
          denom: string
          price: int64
          flags: string
          appendages: byte [] }

    type SeqOrderExecutedAtPriceSize =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          tradeId: int
          quantity: int
          denom: string
          price: int64
          leaves: int
          flags: string
          appendages: byte [] }

    type SeqOrderModified =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          newOrderId: int64
          side: string
          denom: string
          price: int64
          quantity: int
          mmLocate: int
          flags: string
          appendages: byte [] }

    type SeqPriceLevelAddExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          price: int64
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelAddFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          priceDecimal: int64
          priceFractional: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelAddLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelAddShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelBookClear =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          flags: int }

    type SeqPriceLevelDeleteExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          price: int64
          flags: int }

    type SeqPriceLevelDeleteLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          flags: int }

    type SeqPriceLevelDeleteShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          flags: int }

    type SeqPriceLevelModifyExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          price: int64
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelModifyFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          priceDecimal: int64
          priceFractional: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelModifyLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelModifyShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceRangeIndication =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          indicationType: string
          flags: int
          lowDenom: string
          lowPrice: int64
          highDenom: string
          highPrice: int64
          appendages: byte [] }

    type SeqRequestForQuote =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          requestId: string
          appendages: byte [] }

    type SeqSystemEvent =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          nanos: int64
          event: string }

    type SeqTradeCancel =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          price: int64
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          cancelFlags: string
          appendages: byte [] }

    type SeqTradeCorrection =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          oldTradeId: int
          oldDenom: string
          oldPrice: int64
          oldVolume: int64
          oldPriceFlags: string
          oldEligFlags: string
          oldReportFlags: int
          newTradeId: int
          newDenom: string
          newPrice: int64
          newVolume: int64
          newPriceFlags: string
          newEligFlags: string
          newReportFlags: int
          correctionFlags: string
          appendages: byte [] }

    type SeqTradeExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          price: int64
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          changeFlags: string
          appendages: byte [] }

    type SeqTradeFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          priceDecimal: int64
          priceFractional: int
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          changeFlags: string
          appendages: byte [] }

    type SeqTradeLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          price: int
          volume: int
          priceFlags: string
          eligFlags: string
          reportFlags: int
          changeFlags: string
          appendages: byte [] }

    type SeqTradeShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          price: int
          volume: int
          priceFlags: string
          eligFlags: string
          reportFlags: int
          changeFlags: string
          appendages: byte [] }

    type SeqTwoSidedNBBOExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          bidMCLocate: int
          bidDenom: string
          bidPrice: int64
          bidSize: int
          askMCLocate: int
          askDenom: string
          askPrice: int64
          askSize: int
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqTwoSidedNBBOLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          bidMCLocate: int
          bidPrice: int
          bidSize: int
          askMCLocate: int
          askPrice: int
          askSize: int
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqTwoSidedNBBOShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          bidMCLocate: int
          bidPrice: int
          bidSize: int
          askMCLocate: int
          askPrice: int
          askSize: int
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqTwoSidedQuoteExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          bidDenom: string
          bidPrice: int64
          bidSize: int
          askDenom: string
          askPrice: int64
          askSize: int
          condition: string
          quoteFlags: string
          bidFlags: string
          askFlags: string
          appendages: byte [] }

    type SeqTwoSidedQuoteFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          bidDenom: string
          bidPriceDecimal: int64
          bidPriceFractional: int
          bidSize: int
          askDenom: string
          askPriceDecimal: int64
          askPriceFractional: int
          askSize: int
          condition: string
          quoteFlags: string
          bidFlags: string
          askFlags: string
          appendages: byte [] }

    type SeqTwoSidedQuoteLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          bidPrice: int
          bidSize: int
          askPrice: int
          askSize: int
          condition: string
          quoteFlags: string
          bidFlags: string
          askFlags: string
          appendages: byte [] }

    type SeqTwoSidedQuoteShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          bidPrice: int
          bidSize: int
          askPrice: int
          askSize: int
          condition: string
          quoteFlags: string
          bidFlags: string
          askFlags: string
          appendages: byte [] }

    type SeqValueUpdate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          flags: int
          appendages: byte [] }

module ``CTA-B-UF30`` =
    type SeqAdminText =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          text: string }

    type SeqAlternateSymbol =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          sLocate: int
          symbolType: string
          symbol: string }

    type SeqAsOfTrade =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          price: int64
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          month: string
          day: string
          year: int
          reportNanos: int64
          appendages: byte [] }

    type SeqAsOfTradeCancel =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          price: int64
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          month: string
          day: string
          year: int
          reportNanos: int64
          cancelFlags: string
          appendages: byte [] }

    type SeqAsOfTradeCorrection =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          oldTradeId: int
          oldDenom: string
          oldPrice: int64
          oldVolume: int64
          oldPriceFlags: string
          oldEligFlags: string
          oldReportFlags: int
          oldMonth: string
          oldDay: string
          oldYear: int
          oldReportNanos: int64
          newTradeId: int
          newDenom: string
          newPrice: int64
          newVolume: int64
          newPriceFlags: string
          newEligFlags: string
          newReportFlags: int
          newMonth: string
          newDay: string
          newYear: int
          newReportNanos: int64
          correctionFlags: string
          appendages: byte [] }

    type SeqAsOfTradeFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          priceDecimal: int64
          priceFractional: int
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          month: string
          day: string
          year: int
          reportNanos: int64
          appendages: byte [] }

    type SeqAsOfValueUpdate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          flags: int
          month: string
          day: string
          year: int
          valueNanos: int64
          appendages: byte [] }

    type SeqCapitalDistributions =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          reportType: string
          paymentMonth: string
          paymentDay: string
          paymentYear: int
          recordMonth: string
          recordDay: string
          recordYear: int
          exMonth: string
          exDay: string
          exYear: int
          denom: string
          amount: int64
          flags: int
          appendages: byte [] }

    type SeqChannelDay =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          dayOfMonth: string }

    type SeqChannelEvent =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          event: string
          mcLocate: int
          appendages: byte [] }

    type SeqChannelSeconds =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          seconds: int }

    type SeqCombinationLeg =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          sLocate: int
          legLocate: int
          side: string
          ratioDenom: string
          ratio: int64
          appendages: byte [] }

    type SeqDividend =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          reportType: string
          paymentMonth: string
          paymentDay: string
          paymentYear: int
          recordMonth: string
          recordDay: string
          recordYear: int
          exMonth: string
          exDay: string
          exYear: int
          dividendType: string
          totalCashDenom: string
          totalCash: int64
          flags: int
          appendages: byte [] }

    type SeqEndOfSnapshot =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          nextSequence: int64 }

    type SeqExchangeIdLocate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          mcLocate: int
          exchangeId: string }

    type SeqIndexSymbolParticipation =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          sLocate: int
          cLocate: int
          appendages: byte [] }

    type SeqInstrumentImbalance =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          imbalanceType: string
          side: string
          volume: int64
          appendages: byte [] }

    type SeqInstrumentLocate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          locate: int
          country: string
          currency: string
          mic: string
          productType: string
          symbol: string
          appendages: byte [] }

    type SeqInstrumentMetaData =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          sLocate: int
          appendages: byte [] }

    type SeqInstrumentStatus =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          statusType: string
          statusCode: string
          reason: string
          statusFlags: string
          detail: string
          appendages: byte [] }

    type SeqMarketCenterLocate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          locate: int
          mic: string }

    type SeqMarketMakerLocate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          locate: int
          mmid: string }

    type SeqMarketMakerStatus =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          appendages: byte [] }

    type SeqNewsUpdate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          newsTime: int
          month: string
          day: string
          year: int
          headline: string
          news: string }

    type SeqOneSidedNBBOExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          denom: string
          price: int64
          size: int
          side: string
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqOneSidedNBBOLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          price: int
          size: int
          side: string
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqOneSidedNBBOShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          price: int
          size: int
          side: string
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqOneSidedQuoteExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          denom: string
          price: int64
          size: int
          side: string
          condition: string
          quoteFlags: string
          priceFlags: string
          appendages: byte [] }

    type SeqOneSidedQuoteFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          denom: string
          priceDecimal: int64
          priceFractional: int
          size: int
          side: string
          condition: string
          quoteFlags: string
          priceFlags: string
          appendages: byte [] }

    type SeqOneSidedQuoteLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          price: int
          size: int
          side: string
          condition: string
          quoteFlags: string
          priceFlags: string
          appendages: byte [] }

    type SeqOneSidedQuoteShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          price: int
          size: int
          side: string
          condition: string
          quoteFlags: string
          priceFlags: string
          appendages: byte [] }

    type SeqOptionDeliveryComponent =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          rLocate: int
          index: int
          total: int
          deliverableUnits: int
          settlementMethod: string
          fixedAmtDenom: string
          fixedAmt: int64
          currency: string
          strikePct: int
          cLocate: int }

    type SeqOrderAddedExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          side: string
          denom: string
          price: int64
          quantity: int
          mmLocate: int
          flags: string
          appendages: byte [] }

    type SeqOrderAddedLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          side: string
          price: int
          quantity: int
          mmLocate: int
          flags: string
          appendages: byte [] }

    type SeqOrderAddedShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          side: string
          price: int
          quantity: int
          mmLocate: int
          flags: string
          appendages: byte [] }

    type SeqOrderBookClear =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          appendages: byte [] }

    type SeqOrderCanceled =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          quantity: int
          appendages: byte [] }

    type SeqOrderDeleted =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          appendages: byte [] }

    type SeqOrderExecuted =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          tradeId: int
          quantity: int
          flags: string
          appendages: byte [] }

    type SeqOrderExecutedAtPrice =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          tradeId: int
          quantity: int
          denom: string
          price: int64
          flags: string
          appendages: byte [] }

    type SeqOrderExecutedAtPriceSize =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          tradeId: int
          quantity: int
          denom: string
          price: int64
          leaves: int
          flags: string
          appendages: byte [] }

    type SeqOrderModified =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          newOrderId: int64
          side: string
          denom: string
          price: int64
          quantity: int
          mmLocate: int
          flags: string
          appendages: byte [] }

    type SeqPriceLevelAddExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          price: int64
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelAddFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          priceDecimal: int64
          priceFractional: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelAddLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelAddShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelBookClear =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          flags: int }

    type SeqPriceLevelDeleteExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          price: int64
          flags: int }

    type SeqPriceLevelDeleteLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          flags: int }

    type SeqPriceLevelDeleteShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          flags: int }

    type SeqPriceLevelModifyExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          price: int64
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelModifyFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          priceDecimal: int64
          priceFractional: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelModifyLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelModifyShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceRangeIndication =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          indicationType: string
          flags: int
          lowDenom: string
          lowPrice: int64
          highDenom: string
          highPrice: int64
          appendages: byte [] }

    type SeqRequestForQuote =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          requestId: string
          appendages: byte [] }

    type SeqSystemEvent =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          nanos: int64
          event: string }

    type SeqTradeCancel =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          price: int64
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          cancelFlags: string
          appendages: byte [] }

    type SeqTradeCorrection =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          oldTradeId: int
          oldDenom: string
          oldPrice: int64
          oldVolume: int64
          oldPriceFlags: string
          oldEligFlags: string
          oldReportFlags: int
          newTradeId: int
          newDenom: string
          newPrice: int64
          newVolume: int64
          newPriceFlags: string
          newEligFlags: string
          newReportFlags: int
          correctionFlags: string
          appendages: byte [] }

    type SeqTradeExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          price: int64
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          changeFlags: string
          appendages: byte [] }

    type SeqTradeFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          priceDecimal: int64
          priceFractional: int
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          changeFlags: string
          appendages: byte [] }

    type SeqTradeLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          price: int
          volume: int
          priceFlags: string
          eligFlags: string
          reportFlags: int
          changeFlags: string
          appendages: byte [] }

    type SeqTradeShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          price: int
          volume: int
          priceFlags: string
          eligFlags: string
          reportFlags: int
          changeFlags: string
          appendages: byte [] }

    type SeqTwoSidedNBBOExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          bidMCLocate: int
          bidDenom: string
          bidPrice: int64
          bidSize: int
          askMCLocate: int
          askDenom: string
          askPrice: int64
          askSize: int
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqTwoSidedNBBOLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          bidMCLocate: int
          bidPrice: int
          bidSize: int
          askMCLocate: int
          askPrice: int
          askSize: int
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqTwoSidedNBBOShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          bidMCLocate: int
          bidPrice: int
          bidSize: int
          askMCLocate: int
          askPrice: int
          askSize: int
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqTwoSidedQuoteExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          bidDenom: string
          bidPrice: int64
          bidSize: int
          askDenom: string
          askPrice: int64
          askSize: int
          condition: string
          quoteFlags: string
          bidFlags: string
          askFlags: string
          appendages: byte [] }

    type SeqTwoSidedQuoteFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          bidDenom: string
          bidPriceDecimal: int64
          bidPriceFractional: int
          bidSize: int
          askDenom: string
          askPriceDecimal: int64
          askPriceFractional: int
          askSize: int
          condition: string
          quoteFlags: string
          bidFlags: string
          askFlags: string
          appendages: byte [] }

    type SeqTwoSidedQuoteLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          bidPrice: int
          bidSize: int
          askPrice: int
          askSize: int
          condition: string
          quoteFlags: string
          bidFlags: string
          askFlags: string
          appendages: byte [] }

    type SeqTwoSidedQuoteShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          bidPrice: int
          bidSize: int
          askPrice: int
          askSize: int
          condition: string
          quoteFlags: string
          bidFlags: string
          askFlags: string
          appendages: byte [] }

    type SeqValueUpdate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          flags: int
          appendages: byte [] }

module GIDS =
    type SeqCommoditySummary =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          timeStamp: int
          fpType: string
          brand: string
          series: string
          instrumentID: string
          summaryType: string
          sodValue: int64
          high: int64
          low: int64
          eodValue: int64
          netChange: int64
          effectiveDate: int
          currency: string }

    type SeqEquitiesSummary =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          timeStamp: int
          fpType: string
          brand: string
          series: string
          instrumentID: string
          summaryType: string
          sodValue: int64
          high: int64
          low: int64
          eodValue: int64
          netChange: int64
          effectiveDate: int
          currency: string }

    type SeqEtpDirectoryAndDailyValue =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          timeStamp: int
          fpType: string
          industryMIC: string
          etpTradingSymbol: string
          etpIpvSymbol: string
          schedule: string
          frequency: string
          state: string
          navSymbol: string
          NAV: int64
          ecuSymbol: string
          ECU: int64
          totalCashSymbol: string
          totalCash: int64
          ecsSymbol: string
          ECS: int64
          tsoSymbol: string
          tsoOutstanding: int64
          effectiveDate: int
          ``yield``: int64
          coupon: int64
          maturityDate: int
          currency: string
          etpName: string }

    type SeqEtpIpvValue =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          timeStamp: int
          fpType: string
          ipvSymbol: string
          ipvValue: int64
          currency: string }

    type SeqEtpSummary =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          timeStamp: int
          fpType: string
          summaryType: string
          ipvSymbol: string
          sodValue: int64
          high: int64
          low: int64
          eodValue: int64
          netChange: int64
          effectiveDate: int
          currency: string }

    type SeqFixedIncomeSummary =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          timeStamp: int
          fpType: string
          brand: string
          series: string
          instrumentID: string
          summaryType: string
          sodValue: int64
          high: int64
          low: int64
          eodValue: int64
          netChange: int64
          effectiveDate: int
          ``yield``: int64
          duration: int64
          coupon: int64
          currency: string }

    type SeqIndexDirectory =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          timeStamp: int
          instrumentID: string
          disseminationFlag: string
          fpType: string
          brand: string
          series: string
          strategy: string
          assetType: string
          marketCapSize: string
          currency: string
          geography: string
          settlementType: string
          calculationMethod: string
          state: string
          indexUsage: string
          schedule: string
          frequency: string
          numberOfIssueParticipation: int
          baseValue: int64
          baseDate: int
          instrumentName: string }

    type SeqIndexTickDetail =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          timeStamp: int
          fpType: string
          brand: string
          series: string
          instrumentID: string
          tickValue: int64
          tickDirection: string
          currency: string }

    type SeqIssueSymbolParticipation =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          timeStamp: int
          instrumentID: string
          issueSymbol: string
          issueMIC: string
          issueName: string }

    type SeqSettlementValue =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          timeStamp: int
          fpType: string
          brand: string
          series: string
          instrumentID: string
          settlementValue: int64
          settlementType: string
          currency: string }

    type SeqSystemEvent =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          timeStamp: int
          event: string
          schedule: string }

    type SeqSystemSeconds =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          second: int }

module MOCK =
    type SeqEtpIpvValue =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string }

module NewsSchema =
    type NewsAvro =
        { ReleaseTime: string
          TransmissionID: string
          RevisionID: string
          Retract: string
          StoryType: string
          TechnicalStory: string
          Metadata: string
          Headline: string
          Body: string
          Tickers: string
          Copyright: string
          ISIN: string
          ArticleImage: string }

module NFN =
    type Heartbeat = { TimeStamp: int64 }
    type AdminDailyStatistics =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string
          MutualFundMediaList: string
          MutualFundSupplementalList: string
          MutualFundReporting: string
          MoneyMarketFundMediaList: string
          MoneyMarketFundSupplementalList: string
          MoneyMarketFundReporting: string
          DebtUITList: string
          DebtUITReporting: string
          EquityUITList: string
          EquityUITReporting: string
          StructuredProductList: string
          StructuredProductReporting: string
          AnnuityList: string
          AnnuityReporting: string
          AIPList: string
          AIPReporting: string
          NextSharesList: string
          NextSharesReporting: string
          CollectiveInvestmentTrustList: string
          CollectiveInvestmentTrustReporting: string
          ManagedAccountsList: string
          ManagedAccountsReporting: string
          SeparateAccountsList: string
          SeparateAccountsReporting: string
          HedgeFundList: string
          HedgeFundReporting: string
          DemandDepositAccountList: string
          DemandDepositAccountReporting: string
          DataServiceSpinCount: string }

    type AdminGeneral =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string
          SystemAlert: string }

    type AdminSymbolDirectory =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string
          InstrumentTypeTier: string
          InstrumentCode: string
          Symbol: string
          PricingFrequency: string
          InstrumentName: string
          ExchangeCodeForListedInstruments: string
          ExchangeSymbolForListedInstruments: string
          Currency: string
          InstrumentRegistration: string
          ModelPortfolioFlag: string }

    type AdminSymbolDirectoryExpandedInstrumentCode =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string }

    type ControlEndOfDay =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string }

    type ControlEndOfRetransmissionRequests =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string }

    type ControlEndOfSummarySpin =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string }

    type ControlEndOfTransmission =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string }

    type ControlLineIntegrity =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string }

    type ControlMessageSequenceNumberReset =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string }

    type ControlSessionClose =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string }

    type ControlSessionOpen =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string }

    type ControlStartOfDay =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string }

    type ControlStartOfSummarySpin =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string }

    type ValuationMessageDistributions =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string
          InstrumentTypeTier: string
          Symbol: string
          Action: string
          ShortTermCapitalGain: string
          LongTermCapitalGain: string
          UnAllocatedDistributions: string
          ROC: string
          Currency: string
          DstPaymentDate: string
          DstRecordDate: string
          DstExDate: string
          DstReinvestDate: string }

    type ValuationMessageDividends =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string
          InstrumentTypeTier: string
          Symbol: string
          Action: string
          CashDistributionType: string
          CashDistributionTotal: string
          CashDistributionNonQualified: string
          CashDistributionQualified: string
          CashDistributionTaxFree: string
          TaxCreditOrdinaryForeign: string
          TaxCreditQualifiedForeign: string
          StockDividendRatio: string
          Currency: string
          DivPaymentDate: string
          DivRecordDate: string
          DivExDate: string
          DivReinvestDate: string }

    type ValuationMessageGeneral =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string
          InstrumentTypeTier: string
          Symbol: string
          ReportingType: string
          Footnotes: string
          NAV: string
          OfferPrice: string
          MarketPrice: string
          RedemptionPrice: string
          WrapPrice: string
          TotalNetAssets: string
          CurrentYield: string
          CurrentYieldDirection: string
          EstimatedLongTermReturn: string
          EstimatedLongTermReturnDirection: string
          AccruedInterest: string
          DailyDividendFactor: string
          DailyDividendAdjustmentIndicator: string
          Currency: string
          EntryDate: string }

    type ValuationMessageMoneyMarkets =
        { MessageCategory: string
          MessageType: string
          SessionIdentifier: string
          RetransmissionRequester: string
          MessageSequenceNumber: string
          OriginatorId: string
          MessageDateTime: string
          TestSymbolFlag: string
          InstrumentTypeTier: string
          Symbol: string
          ReportingType: string
          Footnotes: string
          AverageMaturity: string
          AverageLife: string
          NAV: string
          YieldGross7Day: string
          YieldGross7DayDirection: string
          YieldSubsidized7Day: string
          YieldSubsidized7DayDirection: string
          YieldEffectiveAnnualized7Day: string
          YieldEffectiveAnnualized7DayDirection: string
          Yield30Day: string
          Yield30DayDirection: string
          Yield30DayDate: string
          TotalNetAssets: string
          DailyDividendFactor: string
          DailyDividendAdjustmentIndicator: string
          Currency: string
          EntryDate: string
          CalculationTime: string }

module NLSBSX =
    type SeqAdjClosingPrice =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          adjClosingPrice: int }

    type SeqIpoQuoting =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          releaseTime: int
          releaseQualifier: string
          ipoPrice: int }

    type SeqMWCB =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMWCBStatus =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          level: string }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          marketCenter: string
          action: string }

    type SeqShortSaleRestrictionIndicator =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          regSHOAction: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          event: string }

    type SeqTradeCancelETMFMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origNavPrice: int
          origSize: int
          origSaleCondition: string }

    type SeqTradeCancelMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origSize: int
          origSaleCondition: string }

    type SeqTradeCorrectionETMFMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origNavPremium: int
          origSize: int
          origSaleCondition: string
          correctedControlNumber: string
          correctedPrice: int
          correctedNavPremium: int
          correctedSize: int
          correctedSaleCondition: string }

    type SeqTradeCorrectionMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origSize: int
          origSaleCondition: string
          correctedControlNumber: string
          correctedPrice: int
          correctedSize: int
          correctedSaleCondition: string }

    type SeqTradeReportETMFMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          controlNumber: string
          price: int
          size: int
          navPremium: int
          saleCondition: string }

    type SeqTradeReportMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          controlNumber: string
          price: int
          size: int
          saleCondition: string }

    type SeqTradingStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          tradingState: string
          reason: string }

module NLSCTA =
    type SeqAdjClosingPrice =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          adjClosingPrice: int }

    type SeqAdjClosingPriceLong =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          adjClosingPrice: int64 }

    type SeqEndOfDayTradeSummary =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          consHigh: int
          consLow: int
          consClose: int
          cosolidatedVolume: int64
          consOpen: int }

    type SeqEndOfDayTradeSummaryETMF =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          consHigh: int
          consHighNAV: int
          consLow: int
          consLowNAV: int
          consClose: int
          consCloseNAV: int
          cosolidatedVolume: int64
          consOpen: int
          consOpenNAV: int }

    type SeqEndOfDayTradeSummaryLong =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          consHigh: int64
          consLow: int64
          consClose: int64
          cosolidatedVolume: int64
          consOpen: int64 }

    type SeqIPOMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          marketCenter: string
          refForNetChange: string
          refPrice: int }

    type SeqIpoQuoting =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          releaseTime: int
          releaseQualifier: string
          ipoPrice: int }

    type SeqMWCB =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMWCBStatus =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          level: string }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          market: string
          action: string }

    type SeqShortSaleRestrictionIndicator =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          regSHOAction: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          event: string }

    type SeqTradeCancel =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origSize: int
          origSaleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeCancelETMFMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origNavPrice: int
          origSize: int
          origSaleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeCancelLong =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int64
          origSize: int
          origSaleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeCorrection =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origSize: int
          origSaleCondition: string
          correctedControlNumber: string
          correctedPrice: int
          correctedSize: int
          correctedSaleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeCorrectionETMFMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origNavPremium: int
          origSize: int
          origSaleCondition: string
          correctedControlNumber: string
          correctedPrice: int
          correctedNavPremium: int
          correctedSize: int
          correctedSaleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeCorrectionLong =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int64
          origSize: int
          origSaleCondition: string
          correctedControlNumber: string
          correctedPrice: int64
          correctedSize: int
          correctedSaleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeReportETMFMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          controlNumber: string
          price: int
          size: int
          navPremium: int
          saleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeReportLongMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          controlNumber: string
          price: int64
          size: int
          saleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeReportMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          controlNumber: string
          price: int
          size: int
          saleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradingStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          filler: string
          symbol: string
          market: string
          tradingState: string
          reason: string }

module NLSPSX =
    type SeqAdjClosingPrice =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          adjClosingPrice: int }

    type SeqIpoQuoting =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          releaseTime: int
          releaseQualifier: string
          ipoPrice: int }

    type SeqMWCB =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMWCBStatus =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          level: string }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          marketCenter: string
          action: string }

    type SeqShortSaleRestrictionIndicator =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          regSHOAction: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          event: string }

    type SeqTradeCancelETMFMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origNavPrice: int
          origSize: int
          origSaleCondition: string }

    type SeqTradeCancelMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origSize: int
          origSaleCondition: string }

    type SeqTradeCorrectionETMFMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origNavPremium: int
          origSize: int
          origSaleCondition: string
          correctedControlNumber: string
          correctedPrice: int
          correctedNavPremium: int
          correctedSize: int
          correctedSaleCondition: string }

    type SeqTradeCorrectionMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origSize: int
          origSaleCondition: string
          correctedControlNumber: string
          correctedPrice: int
          correctedSize: int
          correctedSaleCondition: string }

    type SeqTradeReportETMFMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          controlNumber: string
          price: int
          size: int
          navPremium: int
          saleCondition: string }

    type SeqTradeReportMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          controlNumber: string
          price: int
          size: int
          saleCondition: string }

    type SeqTradingStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          tradingState: string
          reason: string }

module NLSUTP =
    type SeqAdjClosingPrice =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          adjClosingPrice: int }

    type SeqAdjClosingPriceLong =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          adjClosingPrice: int64 }

    type SeqEndOfDayTradeSummary =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          consHigh: int
          consLow: int
          consClose: int
          cosolidatedVolume: int64
          consOpen: int }

    type SeqEndOfDayTradeSummaryETMF =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          consHigh: int
          consHighNAV: int
          consLow: int
          consLowNAV: int
          consClose: int
          consCloseNAV: int
          cosolidatedVolume: int64
          consOpen: int
          consOpenNAV: int }

    type SeqEndOfDayTradeSummaryLong =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          securityClass: string
          consHigh: int64
          consLow: int64
          consClose: int64
          cosolidatedVolume: int64
          consOpen: int64 }

    type SeqIPOMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          marketCenter: string
          refForNetChange: string
          refPrice: int }

    type SeqIpoQuoting =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          releaseTime: int
          releaseQualifier: string
          ipoPrice: int }

    type SeqMWCB =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMWCBStatus =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          level: string }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          market: string
          action: string }

    type SeqShortSaleRestrictionIndicator =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          symbol: string
          regSHOAction: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          event: string }

    type SeqTradeCancel =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origSize: int
          origSaleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeCancelETMFMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origNavPrice: int
          origSize: int
          origSaleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeCancelLong =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int64
          origSize: int
          origSaleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeCorrection =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origSize: int
          origSaleCondition: string
          correctedControlNumber: string
          correctedPrice: int
          correctedSize: int
          correctedSaleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeCorrectionETMFMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int
          origNavPremium: int
          origSize: int
          origSaleCondition: string
          correctedControlNumber: string
          correctedPrice: int
          correctedNavPremium: int
          correctedSize: int
          correctedSaleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeCorrectionLong =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          origControlNumber: string
          origPrice: int64
          origSize: int
          origSaleCondition: string
          correctedControlNumber: string
          correctedPrice: int64
          correctedSize: int
          correctedSaleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeReportETMFMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          controlNumber: string
          price: int
          size: int
          navPremium: int
          saleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeReportLongMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          controlNumber: string
          price: int64
          size: int
          saleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradeReportMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          marketCenter: string
          symbol: string
          securityClass: string
          controlNumber: string
          price: int
          size: int
          saleCondition: string
          cosolidatedVolume: int64 }

    type SeqTradingStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          trackingID: int64
          msgType: string
          filler: string
          symbol: string
          market: string
          tradingState: string
          reason: string }

module ``QBBO-A-BSX`` =
    type SeqDirectoryMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCategory: string
          fsi: string
          roundLotSize: int
          roundLotOnly: string
          issueClass: string
          issueSubtype: string
          authenticity: string
          shortThreshold: string
          ipo: string
          luldTier: string
          etf: string
          etfFactor: int
          inverseETF: string }

    type SeqETMFQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          bidNavPremium: int
          askPrice: int
          askQuantity: int
          askNavPremium: int }

    type SeqIPOQuotePeriodMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          releaseTime: int
          releaseQualifier: string
          ipoPrice: int }

    type SeqMWCBDeclineMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMWCBStatusMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          breachLevel: string }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCenter: string
          action: string }

    type SeqQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          askPrice: int
          askQuantity: int }

    type SeqRegSHORestrictionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          regSHOAction: string }

    type SeqRetailInterestMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          interest: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          event: string }

    type SeqTradingStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          tradingState: string
          reason: string }

module ``QBBO-A-CORE`` =
    type SeqDirectoryMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCategory: string
          fsi: string
          roundLotSize: int
          roundLotOnly: string
          issueClass: string
          issueSubtype: string
          authenticity: string
          shortThreshold: string
          ipo: string
          luldTier: string
          etf: string
          etfFactor: int
          inverseETF: string }

    type SeqETMFQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          bidNavPremium: int
          askPrice: int
          askQuantity: int
          askNavPremium: int }

    type SeqIPOQuotePeriodMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          releaseTime: int
          releaseQualifier: string
          ipoPrice: int }

    type SeqMWCBDeclineMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMWCBStatusMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          breachLevel: string }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCenter: string
          action: string }

    type SeqQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          askPrice: int
          askQuantity: int }

    type SeqRegSHORestrictionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          regSHOAction: string }

    type SeqRetailInterestMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          interest: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          event: string }

    type SeqTradingStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          tradingState: string
          reason: string }

module ``QBBO-A-PSX`` =
    type SeqDirectoryMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCategory: string
          fsi: string
          roundLotSize: int
          roundLotOnly: string
          issueClass: string
          issueSubtype: string
          authenticity: string
          shortThreshold: string
          ipo: string
          luldTier: string
          etf: string
          etfFactor: int
          inverseETF: string }

    type SeqETMFQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          bidNavPremium: int
          askPrice: int
          askQuantity: int
          askNavPremium: int }

    type SeqIPOQuotePeriodMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          releaseTime: int
          releaseQualifier: string
          ipoPrice: int }

    type SeqMWCBDeclineMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMWCBStatusMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          breachLevel: string }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCenter: string
          action: string }

    type SeqQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          askPrice: int
          askQuantity: int }

    type SeqRegSHORestrictionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          regSHOAction: string }

    type SeqRetailInterestMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          interest: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          event: string }

    type SeqTradingStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          tradingState: string
          reason: string }

module ``QBBO-B-BSX`` =
    type SeqDirectoryMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCategory: string
          fsi: string
          roundLotSize: int
          roundLotOnly: string
          issueClass: string
          issueSubtype: string
          authenticity: string
          shortThreshold: string
          ipo: string
          luldTier: string
          etf: string
          etfFactor: int
          inverseETF: string }

    type SeqETMFQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          bidNavPremium: int
          askPrice: int
          askQuantity: int
          askNavPremium: int }

    type SeqIPOQuotePeriodMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          releaseTime: int
          releaseQualifier: string
          ipoPrice: int }

    type SeqMWCBDeclineMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMWCBStatusMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          breachLevel: string }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCenter: string
          action: string }

    type SeqQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          askPrice: int
          askQuantity: int }

    type SeqRegSHORestrictionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          regSHOAction: string }

    type SeqRetailInterestMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          interest: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          event: string }

    type SeqTradingStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          tradingState: string
          reason: string }

module ``QBBO-B-CORE`` =
    type SeqDirectoryMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCategory: string
          fsi: string
          roundLotSize: int
          roundLotOnly: string
          issueClass: string
          issueSubtype: string
          authenticity: string
          shortThreshold: string
          ipo: string
          luldTier: string
          etf: string
          etfFactor: int
          inverseETF: string }

    type SeqETMFQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          bidNavPremium: int
          askPrice: int
          askQuantity: int
          askNavPremium: int }

    type SeqIPOQuotePeriodMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          releaseTime: int
          releaseQualifier: string
          ipoPrice: int }

    type SeqMWCBDeclineMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMWCBStatusMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          breachLevel: string }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCenter: string
          action: string }

    type SeqQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          askPrice: int
          askQuantity: int }

    type SeqRegSHORestrictionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          regSHOAction: string }

    type SeqRetailInterestMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          interest: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          event: string }

    type SeqTradingStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          tradingState: string
          reason: string }

module ``QBBO-B-PSX`` =
    type SeqDirectoryMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCategory: string
          fsi: string
          roundLotSize: int
          roundLotOnly: string
          issueClass: string
          issueSubtype: string
          authenticity: string
          shortThreshold: string
          ipo: string
          luldTier: string
          etf: string
          etfFactor: int
          inverseETF: string }

    type SeqETMFQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          bidNavPremium: int
          askPrice: int
          askQuantity: int
          askNavPremium: int }

    type SeqIPOQuotePeriodMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          releaseTime: int
          releaseQualifier: string
          ipoPrice: int }

    type SeqMWCBDeclineMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMWCBStatusMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          breachLevel: string }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCenter: string
          action: string }

    type SeqQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          askPrice: int
          askQuantity: int }

    type SeqRegSHORestrictionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          regSHOAction: string }

    type SeqRetailInterestMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          interest: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          event: string }

    type SeqTradingStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          tradingState: string
          reason: string }

module ``QBBO-C-BSX`` =
    type SeqDirectoryMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCategory: string
          fsi: string
          roundLotSize: int
          roundLotOnly: string
          issueClass: string
          issueSubtype: string
          authenticity: string
          shortThreshold: string
          ipo: string
          luldTier: string
          etf: string
          etfFactor: int
          inverseETF: string }

    type SeqETMFQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          bidNavPremium: int
          askPrice: int
          askQuantity: int
          askNavPremium: int }

    type SeqIPOQuotePeriodMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          releaseTime: int
          releaseQualifier: string
          ipoPrice: int }

    type SeqMWCBDeclineMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMWCBStatusMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          breachLevel: string }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCenter: string
          action: string }

    type SeqQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          askPrice: int
          askQuantity: int }

    type SeqRegSHORestrictionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          regSHOAction: string }

    type SeqRetailInterestMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          interest: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          event: string }

    type SeqTradingStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          tradingState: string
          reason: string }

module ``QBBO-C-CORE`` =
    type SeqDirectoryMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCategory: string
          fsi: string
          roundLotSize: int
          roundLotOnly: string
          issueClass: string
          issueSubtype: string
          authenticity: string
          shortThreshold: string
          ipo: string
          luldTier: string
          etf: string
          etfFactor: int
          inverseETF: string }

    type SeqETMFQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          bidNavPremium: int
          askPrice: int
          askQuantity: int
          askNavPremium: int }

    type SeqIPOQuotePeriodMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          releaseTime: int
          releaseQualifier: string
          ipoPrice: int }

    type SeqMWCBDeclineMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMWCBStatusMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          breachLevel: string }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCenter: string
          action: string }

    type SeqQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          askPrice: int
          askQuantity: int }

    type SeqRegSHORestrictionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          regSHOAction: string }

    type SeqRetailInterestMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          interest: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          event: string }

    type SeqTradingStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          tradingState: string
          reason: string }

module ``QBBO-C-PSX`` =
    type SeqDirectoryMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCategory: string
          fsi: string
          roundLotSize: int
          roundLotOnly: string
          issueClass: string
          issueSubtype: string
          authenticity: string
          shortThreshold: string
          ipo: string
          luldTier: string
          etf: string
          etfFactor: int
          inverseETF: string }

    type SeqETMFQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          bidNavPremium: int
          askPrice: int
          askQuantity: int
          askNavPremium: int }

    type SeqIPOQuotePeriodMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          releaseTime: int
          releaseQualifier: string
          ipoPrice: int }

    type SeqMWCBDeclineMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMWCBStatusMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          breachLevel: string }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          marketCenter: string
          action: string }

    type SeqQuoteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          bidPrice: int
          bidQuantity: int
          askPrice: int
          askQuantity: int }

    type SeqRegSHORestrictionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          regSHOAction: string }

    type SeqRetailInterestMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          interest: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          event: string }

    type SeqTradingStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          trackingID: int64
          symbol: string
          market: string
          tradingState: string
          reason: string }

module ``TOTALVIEW-BSX`` =
    type SeqAddAttributedOrderMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          side: string
          quantity: int
          symbol: string
          price: int
          mpid: string }

    type SeqAddOrderMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          side: string
          quantity: int
          symbol: string
          price: int }

    type SeqBrokenTradeMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          matchId: int64 }

    type SeqCrossTradeMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          quantity: int64
          symbol: string
          price: int
          matchId: int64
          crossType: string }

    type SeqFirmPermissionsMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          mpid: string
          symbol: string
          pmm: string
          mmm: string
          mps: string }

    type SeqIpoQuotingPeriodMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          quoteReleaseTime: int
          quoteReleaseQuant: string
          ipoPrice: int }

    type SeqLULDReopenMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          refPrice: int
          upperPrice: int
          lowerPrice: int
          extensions: int }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          marketCenter: string
          action: string }

    type SeqMwcbLevelsMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMwcbStatusMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          breachedLevel: string }

    type SeqNOIIMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          quantity: int64
          imbalance: int64
          imbalanceDir: string
          symbol: string
          farPrice: int
          nearPrice: int
          refPrice: int
          crossType: string
          priceVarianceInd: string }

    type SeqOrderCancelMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          quantity: int }

    type SeqOrderDeleteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64 }

    type SeqOrderExecutedMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          quantity: int
          matchId: int64 }

    type SeqOrderExecutedWithPriceMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          quantity: int
          matchId: int64
          printable: string
          price: int }

    type SeqRegSHOStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          state: string }

    type SeqReplaceOrderMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          newOrderId: int64
          quantity: int
          price: int }

    type SeqRetailInterestMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          interest: string }

    type SeqSymbolDirectoryMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          marketCategory: string
          fsi: string
          roundLotSize: int
          roundLotOnly: string
          issueClassification: string
          issueSubtype: string
          authenticity: string
          shortSaleThreshold: string
          ipoFlag: string
          luldPriceTier: string
          etpFlag: string
          etpLeverageFactor: int
          inverse: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          event: string }

    type SeqTradeMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          side: string
          quantity: int
          symbol: string
          price: int
          matchId: int64 }

    type SeqTradingActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          tradingState: string
          reserved: string
          reason: string }

module ``TOTALVIEW-PSX`` =
    type SeqAddAttributedOrderMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          side: string
          quantity: int
          symbol: string
          price: int
          mpid: string }

    type SeqAddOrderMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          side: string
          quantity: int
          symbol: string
          price: int }

    type SeqBrokenTradeMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          matchId: int64 }

    type SeqCrossTradeMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          quantity: int64
          symbol: string
          price: int
          matchId: int64
          crossType: string }

    type SeqFirmPermissionsMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          mpid: string
          symbol: string
          pmm: string
          mmm: string
          mps: string }

    type SeqIpoQuotingPeriodMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          quoteReleaseTime: int
          quoteReleaseQuant: string
          ipoPrice: int }

    type SeqLULDReopenMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          refPrice: int
          upperPrice: int
          lowerPrice: int
          extensions: int }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          marketCenter: string
          action: string }

    type SeqMwcbLevelsMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMwcbStatusMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          breachedLevel: string }

    type SeqNOIIMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          quantity: int64
          imbalance: int64
          imbalanceDir: string
          symbol: string
          farPrice: int
          nearPrice: int
          refPrice: int
          crossType: string
          priceVarianceInd: string }

    type SeqOrderCancelMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          quantity: int }

    type SeqOrderDeleteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64 }

    type SeqOrderExecutedMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          quantity: int
          matchId: int64 }

    type SeqOrderExecutedWithPriceMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          quantity: int
          matchId: int64
          printable: string
          price: int }

    type SeqRegSHOStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          state: string }

    type SeqReplaceOrderMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          newOrderId: int64
          quantity: int
          price: int }

    type SeqRetailInterestMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          interest: string }

    type SeqSymbolDirectoryMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          marketCategory: string
          fsi: string
          roundLotSize: int
          roundLotOnly: string
          issueClassification: string
          issueSubtype: string
          authenticity: string
          shortSaleThreshold: string
          ipoFlag: string
          luldPriceTier: string
          etpFlag: string
          etpLeverageFactor: int
          inverse: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          event: string }

    type SeqTradeMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          side: string
          quantity: int
          symbol: string
          price: int
          matchId: int64 }

    type SeqTradingActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          tradingState: string
          reserved: string
          reason: string }

module TOTALVIEW =
    type SeqAddAttributedOrderMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          side: string
          quantity: int
          symbol: string
          price: int
          mpid: string }

    type SeqAddOrderMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          side: string
          quantity: int
          symbol: string
          price: int }

    type SeqBrokenTradeMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          matchId: int64 }

    type SeqCrossTradeMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          quantity: int64
          symbol: string
          price: int
          matchId: int64
          crossType: string }

    type SeqFirmPermissionsMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          mpid: string
          symbol: string
          pmm: string
          mmm: string
          mps: string }

    type SeqIpoQuotingPeriodMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          quoteReleaseTime: int
          quoteReleaseQuant: string
          ipoPrice: int }

    type SeqLULDReopenMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          refPrice: int
          upperPrice: int
          lowerPrice: int
          extensions: int }

    type SeqMarketCenterActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          marketCenter: string
          action: string }

    type SeqMwcbLevelsMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          level1: int64
          level2: int64
          level3: int64 }

    type SeqMwcbStatusMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          breachedLevel: string }

    type SeqNOIIMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          quantity: int64
          imbalance: int64
          imbalanceDir: string
          symbol: string
          farPrice: int
          nearPrice: int
          refPrice: int
          crossType: string
          priceVarianceInd: string }

    type SeqOrderCancelMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          quantity: int }

    type SeqOrderDeleteMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64 }

    type SeqOrderExecutedMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          quantity: int
          matchId: int64 }

    type SeqOrderExecutedWithPriceMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          quantity: int
          matchId: int64
          printable: string
          price: int }

    type SeqRegSHOStateMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          state: string }

    type SeqReplaceOrderMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          newOrderId: int64
          quantity: int
          price: int }

    type SeqRetailInterestMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          interest: string }

    type SeqSymbolDirectoryMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          marketCategory: string
          fsi: string
          roundLotSize: int
          roundLotOnly: string
          issueClassification: string
          issueSubtype: string
          authenticity: string
          shortSaleThreshold: string
          ipoFlag: string
          luldPriceTier: string
          etpFlag: string
          etpLeverageFactor: int
          inverse: string }

    type SeqSystemEventMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          event: string }

    type SeqTradeMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          orderId: int64
          side: string
          quantity: int
          symbol: string
          price: int
          matchId: int64 }

    type SeqTradingActionMessage =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          symbolLocate: int
          uniqueTimestamp: int64
          symbol: string
          tradingState: string
          reserved: string
          reason: string }

module ``UTPBIN-UF30`` =
    type SeqAdminText =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          text: string }

    type SeqAlternateSymbol =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          sLocate: int
          symbolType: string
          symbol: string }

    type SeqAsOfTrade =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          price: int64
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          month: string
          day: string
          year: int
          reportNanos: int64
          appendages: byte [] }

    type SeqAsOfTradeCancel =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          price: int64
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          month: string
          day: string
          year: int
          reportNanos: int64
          cancelFlags: string
          appendages: byte [] }

    type SeqAsOfTradeCorrection =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          oldTradeId: int
          oldDenom: string
          oldPrice: int64
          oldVolume: int64
          oldPriceFlags: string
          oldEligFlags: string
          oldReportFlags: int
          oldMonth: string
          oldDay: string
          oldYear: int
          oldReportNanos: int64
          newTradeId: int
          newDenom: string
          newPrice: int64
          newVolume: int64
          newPriceFlags: string
          newEligFlags: string
          newReportFlags: int
          newMonth: string
          newDay: string
          newYear: int
          newReportNanos: int64
          correctionFlags: string
          appendages: byte [] }

    type SeqAsOfTradeFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          priceDecimal: int64
          priceFractional: int
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          month: string
          day: string
          year: int
          reportNanos: int64
          appendages: byte [] }

    type SeqAsOfValueUpdate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          flags: int
          month: string
          day: string
          year: int
          valueNanos: int64
          appendages: byte [] }

    type SeqCapitalDistributions =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          reportType: string
          paymentMonth: string
          paymentDay: string
          paymentYear: int
          recordMonth: string
          recordDay: string
          recordYear: int
          exMonth: string
          exDay: string
          exYear: int
          denom: string
          amount: int64
          flags: int
          appendages: byte [] }

    type SeqChannelDay =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          dayOfMonth: string }

    type SeqChannelEvent =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          event: string
          mcLocate: int
          appendages: byte [] }

    type SeqChannelSeconds =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          seconds: int }

    type SeqCombinationLeg =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          sLocate: int
          legLocate: int
          side: string
          ratioDenom: string
          ratio: int64
          appendages: byte [] }

    type SeqDividend =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          reportType: string
          paymentMonth: string
          paymentDay: string
          paymentYear: int
          recordMonth: string
          recordDay: string
          recordYear: int
          exMonth: string
          exDay: string
          exYear: int
          dividendType: string
          totalCashDenom: string
          totalCash: int64
          flags: int
          appendages: byte [] }

    type SeqEndOfSnapshot =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          nextSequence: int64 }

    type SeqExchangeIdLocate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          mcLocate: int
          exchangeId: string }

    type SeqIndexSymbolParticipation =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          sLocate: int
          cLocate: int
          appendages: byte [] }

    type SeqInstrumentImbalance =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          imbalanceType: string
          side: string
          volume: int64
          appendages: byte [] }

    type SeqInstrumentLocate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          locate: int
          country: string
          currency: string
          mic: string
          productType: string
          symbol: string
          appendages: byte [] }

    type SeqInstrumentMetaData =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          sLocate: int
          appendages: byte [] }

    type SeqInstrumentStatus =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          statusType: string
          statusCode: string
          reason: string
          statusFlags: string
          detail: string
          appendages: byte [] }

    type SeqMarketCenterLocate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          locate: int
          mic: string }

    type SeqMarketMakerLocate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          locate: int
          mmid: string }

    type SeqMarketMakerStatus =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          appendages: byte [] }

    type SeqNewsUpdate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          newsTime: int
          month: string
          day: string
          year: int
          headline: string
          news: string }

    type SeqOneSidedNBBOExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          denom: string
          price: int64
          size: int
          side: string
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqOneSidedNBBOLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          price: int
          size: int
          side: string
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqOneSidedNBBOShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          price: int
          size: int
          side: string
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqOneSidedQuoteExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          denom: string
          price: int64
          size: int
          side: string
          condition: string
          quoteFlags: string
          priceFlags: string
          appendages: byte [] }

    type SeqOneSidedQuoteFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          denom: string
          priceDecimal: int64
          priceFractional: int
          size: int
          side: string
          condition: string
          quoteFlags: string
          priceFlags: string
          appendages: byte [] }

    type SeqOneSidedQuoteLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          price: int
          size: int
          side: string
          condition: string
          quoteFlags: string
          priceFlags: string
          appendages: byte [] }

    type SeqOneSidedQuoteShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          price: int
          size: int
          side: string
          condition: string
          quoteFlags: string
          priceFlags: string
          appendages: byte [] }

    type SeqOptionDeliveryComponent =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          rLocate: int
          index: int
          total: int
          deliverableUnits: int
          settlementMethod: string
          fixedAmtDenom: string
          fixedAmt: int64
          currency: string
          strikePct: int
          cLocate: int }

    type SeqOrderAddedExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          side: string
          denom: string
          price: int64
          quantity: int
          mmLocate: int
          flags: string
          appendages: byte [] }

    type SeqOrderAddedLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          side: string
          price: int
          quantity: int
          mmLocate: int
          flags: string
          appendages: byte [] }

    type SeqOrderAddedShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          side: string
          price: int
          quantity: int
          mmLocate: int
          flags: string
          appendages: byte [] }

    type SeqOrderBookClear =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          appendages: byte [] }

    type SeqOrderCanceled =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          quantity: int
          appendages: byte [] }

    type SeqOrderDeleted =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          appendages: byte [] }

    type SeqOrderExecuted =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          tradeId: int
          quantity: int
          flags: string
          appendages: byte [] }

    type SeqOrderExecutedAtPrice =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          tradeId: int
          quantity: int
          denom: string
          price: int64
          flags: string
          appendages: byte [] }

    type SeqOrderExecutedAtPriceSize =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          tradeId: int
          quantity: int
          denom: string
          price: int64
          leaves: int
          flags: string
          appendages: byte [] }

    type SeqOrderModified =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          orderId: int64
          newOrderId: int64
          side: string
          denom: string
          price: int64
          quantity: int
          mmLocate: int
          flags: string
          appendages: byte [] }

    type SeqPriceLevelAddExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          price: int64
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelAddFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          priceDecimal: int64
          priceFractional: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelAddLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelAddShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelBookClear =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          flags: int }

    type SeqPriceLevelDeleteExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          price: int64
          flags: int }

    type SeqPriceLevelDeleteLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          flags: int }

    type SeqPriceLevelDeleteShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          flags: int }

    type SeqPriceLevelModifyExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          price: int64
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelModifyFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          denom: string
          priceDecimal: int64
          priceFractional: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelModifyLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceLevelModifyShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          side: string
          price: int
          size: int
          count: int
          flags: int
          appendages: byte [] }

    type SeqPriceRangeIndication =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          indicationType: string
          flags: int
          lowDenom: string
          lowPrice: int64
          highDenom: string
          highPrice: int64
          appendages: byte [] }

    type SeqRequestForQuote =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          requestId: string
          appendages: byte [] }

    type SeqSystemEvent =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          nanos: int64
          event: string }

    type SeqTradeCancel =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          price: int64
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          cancelFlags: string
          appendages: byte [] }

    type SeqTradeCorrection =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          oldTradeId: int
          oldDenom: string
          oldPrice: int64
          oldVolume: int64
          oldPriceFlags: string
          oldEligFlags: string
          oldReportFlags: int
          newTradeId: int
          newDenom: string
          newPrice: int64
          newVolume: int64
          newPriceFlags: string
          newEligFlags: string
          newReportFlags: int
          correctionFlags: string
          appendages: byte [] }

    type SeqTradeExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          price: int64
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          changeFlags: string
          appendages: byte [] }

    type SeqTradeFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          denom: string
          priceDecimal: int64
          priceFractional: int
          volume: int64
          priceFlags: string
          eligFlags: string
          reportFlags: int
          changeFlags: string
          appendages: byte [] }

    type SeqTradeLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          price: int
          volume: int
          priceFlags: string
          eligFlags: string
          reportFlags: int
          changeFlags: string
          appendages: byte [] }

    type SeqTradeShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          tradeId: int
          price: int
          volume: int
          priceFlags: string
          eligFlags: string
          reportFlags: int
          changeFlags: string
          appendages: byte [] }

    type SeqTwoSidedNBBOExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          bidMCLocate: int
          bidDenom: string
          bidPrice: int64
          bidSize: int
          askMCLocate: int
          askDenom: string
          askPrice: int64
          askSize: int
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqTwoSidedNBBOLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          bidMCLocate: int
          bidPrice: int
          bidSize: int
          askMCLocate: int
          askPrice: int
          askSize: int
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqTwoSidedNBBOShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          bidMCLocate: int
          bidPrice: int
          bidSize: int
          askMCLocate: int
          askPrice: int
          askSize: int
          condition: string
          nbboFlags: string
          appendages: byte [] }

    type SeqTwoSidedQuoteExtended =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          bidDenom: string
          bidPrice: int64
          bidSize: int
          askDenom: string
          askPrice: int64
          askSize: int
          condition: string
          quoteFlags: string
          bidFlags: string
          askFlags: string
          appendages: byte [] }

    type SeqTwoSidedQuoteFractional =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          bidDenom: string
          bidPriceDecimal: int64
          bidPriceFractional: int
          bidSize: int
          askDenom: string
          askPriceDecimal: int64
          askPriceFractional: int
          askSize: int
          condition: string
          quoteFlags: string
          bidFlags: string
          askFlags: string
          appendages: byte [] }

    type SeqTwoSidedQuoteLong =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          bidPrice: int
          bidSize: int
          askPrice: int
          askSize: int
          condition: string
          quoteFlags: string
          bidFlags: string
          askFlags: string
          appendages: byte [] }

    type SeqTwoSidedQuoteShort =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          mmLocate: int
          bidPrice: int
          bidSize: int
          askPrice: int
          askSize: int
          condition: string
          quoteFlags: string
          bidFlags: string
          askFlags: string
          appendages: byte [] }

    type SeqValueUpdate =
        { SoupPartition: int
          SoupSequence: int64
          msgType: string
          protocol: string
          channelIndex: string
          msgFlags: string
          srcSequence: int
          srcNanos: int
          sLocate: int
          mcLocate: int
          flags: int
          appendages: byte [] }
